import os
import logging
import datetime
from aiogram import F, Router, Bot, types
from aiogram.types import (Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, 
                           InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.config import MANAGER_TELEGRAM_ID, PAY_SCREENS_DIR  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —É –≤–∞—Å –Ω–∞—Å—Ç—Ä–æ–µ–Ω MANAGER_TELEGRAM_ID
from app.utils.regex import (normolize_phone_number, validate_international_phone_number_basic,
                                  validate_full_name)
from app.keyboards.compile_order_kb import (delivery_keyboard, category_keyboard, 
                                                  cart_keyboard, confirmation_keyboard, 
                                                  track_order_keyboard)
from app.keyboards.calculate_order_kb import registration_keyboard
from app.utils.currency import get_currency_cny
from app.database.database import Database
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
router = Router()

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è FSM ---
class OrderForm(StatesGroup):
    waiting_for_category = State()
    waiting_for_price = State()
    waiting_for_size = State()
    waiting_for_color = State()
    waiting_for_link = State()
    waiting_for_delivery_method = State()
    waiting_for_payment_screenshot = State() # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã
    waiting_for_promocode = State()  # –î–æ–±–∞–≤–ª–µ–Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–º–æ–∫–æ–¥–∞



# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ ---

@router.callback_query(F.data == "assemble_order")
async def start_order_assembly(callback_query: CallbackQuery, state: FSMContext, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–°–æ–±—Ä–∞—Ç—å –∑–∞–∫–∞–∑".
    """
    tg_id = callback_query.from_user.id
    print(f'{tg_id=}')
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram ID
    existing_user = await db.get_user_by_tg_id(tg_id)  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º db
    if not existing_user:  #–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.
        await callback_query.message.answer(
            "–í—ã –µ—â–µ –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ! –ü—Ä–æ–π–¥–∏—Ç–µ –ø—Ä–æ—Å—Ç—É—é —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é.",
            reply_markup=registration_keyboard
        )
        await state.clear() #–°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        await callback_query.message.answer(
            "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:\n- –û—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≤–∏—Å–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞",
            reply_markup=category_keyboard
        )
        await state.set_state(OrderForm.waiting_for_category)
    await callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã


@router.callback_query(OrderForm.waiting_for_category, F.data.startswith("category:"))
async def process_category(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞.
    """
    category = callback_query.data.split(":")[1]
    if category == "back":
        await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:\n- –û—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≤–∏—Å–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞",
                                         reply_markup=category_keyboard)
        await state.set_state(OrderForm.waiting_for_category)
        await callback_query.answer()  # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å —á–∞—Å—ã
    else:
        await state.update_data(category=category)
        await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é: {category}")

        text = (
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–≤–∞—Ä–∞ –≤ CNY:\n\n"
            f"üá®üá≥ –ö—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.datetime.now().strftime('%d.%m.%Y')}):\n"
            f"üëâ ¬•1 = {get_currency_cny()} ‚ÇΩ\n"
        )

        await callback_query.message.answer(text)
        await state.set_state(OrderForm.waiting_for_price)
        await callback_query.answer()


@router.message(OrderForm.waiting_for_price)
async def process_price(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–∞.
    """
    try:
        price = float(message.text)
        await state.update_data(price=price)
        await message.answer(
            '''
üìè –†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:\n
–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –º—ã –Ω–µ –æ—à–∏–±–ª–∏—Å—å —Å –∑–∞–∫–∞–∑–æ–º.\n
–ü—Ä–∏–º–µ—Ä: XS –∏–ª–∏ 52 –¥–ª—è –æ–¥–µ–∂–¥—ã üëö\n 41 –∏–ª–∏ 37,5 –¥–ª—è –æ–±—É–≤–∏ üëü . \n
–ï—Å–ª–∏ —Ç–æ–≤–∞—Ä –ø—Ä–æ–¥–∞–µ—Ç—Å—è –±–µ–∑ —Ä–∞–∑–º–µ—Ä–∞, —Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ "–ù–ï–¢".
''')
        await state.set_state(OrderForm.waiting_for_size)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ —á–∏—Å–ª–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 123.45)")


@router.message(OrderForm.waiting_for_size)
async def process_size(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    size = message.text
    await state.update_data(size=size)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞:")
    await state.set_state(OrderForm.waiting_for_color)


@router.message(OrderForm.waiting_for_color)
async def process_color(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Ü–≤–µ—Ç–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    color = message.text
    await state.update_data(color=color)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ —Ç–æ–≤–∞—Ä:")
    await state.set_state(OrderForm.waiting_for_link)


@router.message(OrderForm.waiting_for_link)
async def process_link(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ —Å—Å—ã–ª–∫–∏ –Ω–∞ —Ç–æ–≤–∞—Ä.
    """
    link = message.text
    await state.update_data(link=link)
    await message.answer("–î–æ—Å—Ç–∞–≤–∫–∞ –∑–∞–∫–∞–∑–∞:\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–∏–±–æ–ª–µ–µ –ø–æ–¥—Ö–æ–¥—è—â–∏–π —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏ –í–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞:\n",
                         reply_markup=delivery_keyboard)
    await state.set_state(OrderForm.waiting_for_delivery_method)

@router.callback_query(OrderForm.waiting_for_delivery_method, F.data.startswith("delivery:"))
async def process_delivery_method(callback_query: CallbackQuery, state: FSMContext, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ —Å–ø–æ—Å–æ–±–∞ –¥–æ—Å—Ç–∞–≤–∫–∏.
    """
    delivery_method = callback_query.data.split(":")[1]
    await state.update_data(delivery_method=delivery_method)
    await callback_query.message.answer(f"–í—ã –≤—ã–±—Ä–∞–ª–∏ —Å–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_method}")

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_tg_id(callback_query.from_user.id)
    user_data = {
        'full_name': user.full_name,
        'phone_number': user.phone_number,
        'address': user.main_address
    } 

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    data = await state.get_data()
    category = data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    size = data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    color = data.get('color', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    link = data.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    price = data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    delivery_method = data.get('delivery_method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    total_price = price * float(get_currency_cny()) #–†–∞—Å—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

    cart_message = f"Ô∏è–ö–û–†–ó–ò–ù–ê –ó–ê–ö–ê–ó–û–í Ô∏è\n" \
                   f"–§–ò–û: {user_data['full_name']}\n" \
                   f"–ö–æ–Ω—Ç–∞–∫—Ç: {user_data['phone_number']}\n" \
                   f"–ê–¥—Ä–µ—Å: {user_data['address']}\n" \
                   f"‚ÄçÔ∏è–í–´–ë–†–ê–ù–ù–´–ï –¢–û–í–ê–†–´ ‚ÄçÔ∏è\n" \
                   f"‚ûÄ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: {category}\n" \
                   f"‚ûÅ –†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {size}\n" \
                   f"‚ûÇ –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞: {color}\n" \
                   f"‚ûÉ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {link}\n" \
                   f"‚ûÑ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {price:.2f}‚ÇΩ - ({delivery_method})\n" \
                   f"–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_price:.2f}‚ÇΩ\n" \

    await callback_query.message.answer(cart_message, reply_markup=cart_keyboard)
    await callback_query.answer()

@router.callback_query(F.data == "back_to_size")
async def back_to_size(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥" –∏–∑ delivery_keyboard.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –∑–∞–ø—Ä–æ—Å—É —Ä–∞–∑–º–µ—Ä–∞ —Ç–æ–≤–∞—Ä–∞.
    """
    await callback_query.message.answer("Ô∏è –†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞:\n–£–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä –í–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞, —á—Ç–æ–±—ã –º—ã –Ω–µ –æ—à–∏–±–ª–∏—Å—å —Å –∑–∞–∫–∞–∑–æ–º\n–ü—Ä–∏–º–µ—Ä: Ô∏è XS –∏–ª–∏ 52 (–µ—Å–ª–∏ –æ–¥–µ–∂–¥–∞) Ô∏è 41 –∏–ª–∏ 37,5 (–µ—Å–ª–∏ –æ–±—É–≤—å)")
    await state.set_state(OrderForm.waiting_for_size)
    await callback_query.answer()

@router.callback_query(F.data == "cancel_order")
async def cancel_order(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–û—Ç–º–µ–Ω–∞".
    –ü—Ä–µ—Ä—ã–≤–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ –∏ —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç —Å–æ—Å—Ç–æ—è–Ω–∏–µ.
    """
    await callback_query.message.answer("–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await state.clear()
    await callback_query.answer()

@router.callback_query(F.data == "continue_checkout")
async def process_continue_checkout(callback_query: CallbackQuery, state: FSMContext, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ".
    """

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_tg_id(callback_query.from_user.id)
    user_data = {
        'full_name': user.full_name,
        'phone_number': user.phone_number,
        'address': user.main_address
    } 

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    data = await state.get_data()
    category = data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    size = data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    color = data.get('color', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    link = data.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    price = data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    delivery_method = data.get('delivery_method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    total_price = price * get_currency_cny() #–†–∞—Å—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

    confirmation_message = f"–ü–û–î–¢–í–ï–†–ñ–î–ï–ù–ò –ó–ê–ö–ê–ó–ê\n" \
                           f"–§–ò–û: {user_data['full_name']}\n" \
                           f"–ö–æ–Ω—Ç–∞–∫—Ç: {user_data['phone_number']}\n" \
                           f"–ê–¥—Ä–µ—Å: {user_data['address']}\n" \
                           f"‚ÄçÔ∏è –°–û–ë–†–ê–ù–ù–´–ï –¢–û–í–ê–†–´ ‚ÄçÔ∏è\n" \
                           f"‚ûÄ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: {category}\n" \
                           f"‚ûÅ –†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {size}\n" \
                           f"‚ûÇ –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞: {color}\n" \
                           f"‚ûÉ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {link}\n" \
                           f"‚ûÑ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {price:.2f}‚ÇΩ - ({delivery_method})\n" \
                           f"–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_price:.2f}‚ÇΩ\n" \
                           f"–ú—ã –≤—ã–∫—É–ø–∞–µ–º —Ç–æ–≤–∞—Ä –≤ —Ç–µ—á–µ–Ω–∏–µ 8 —á–∞—Å–æ–≤ –ø–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã. –ï—Å–ª–∏ –ø—Ä–∏ –≤—ã–∫—É–ø–µ —Ü–µ–Ω–∞ –∏–∑–º–µ–Ω–∏—Ç—Å—è, —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è –¥–æ–ø–ª–∞—Ç—ã –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å—Ä–µ–¥—Å—Ç–≤.\n" \
                           f"–ï—Å–ª–∏ –í–∞—Å —É—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç, –ø–µ—Ä–µ–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É {total_price:.2f}‚ÇΩ –ø–æ –Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑:\n" \
                           f"Ô∏è –°–±–µ—Ä–±–∞–Ω–∫ –∏–ª–∏ –°–ë–ü\n" \
                           f"Ô∏è 89111684777\n" \
                           f"Ô∏è –ê–ª–µ–∫—Å–µ–π –ê–ª–µ–∫—Å–∞–Ω–¥—Ä–æ–≤–∏—á –í.\n" \
                           f"–û—Å—É—â–µ—Å—Ç–≤–ª—è—è –ø–µ—Ä–µ–≤–æ–¥, –≤—ã –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ—Ç–µ —á—Ç–æ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ —É–∫–∞–∑–∞–ª–∏ –≤—Å–µ –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –∏ —Å–æ–≥–ª–∞—Å–Ω—ã —Å–æ —Å—Ä–æ–∫–∞–º–∏ –¥–æ—Å—Ç–∞–≤–∫–∏. –ú—ã –Ω–µ –Ω–µ—Å–µ–º –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ –∑–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ —Ä–∞–∑–º–µ—Ä–æ–≤ –∏ –±—Ä–∞–∫. –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É '–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É'"

    await callback_query.message.answer(confirmation_message, reply_markup=confirmation_keyboard)
    await callback_query.answer()
    unique_order_code = await db.generate_unique_code_for_order()
    state.update_data(unique_order_code=unique_order_code)
    await db.add_order(user.id, category, size, color, link, price, delivery_method, total_price, unique_order_code)


@router.callback_query(F.data == "back_to_cart")
async def back_to_cart(callback_query: CallbackQuery, state: FSMContext, db: Database):
     # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await db.get_user_by_tg_id(callback_query.from_user.id)
    user_data = {
        'full_name': user.full_name,
        'phone_number': user.phone_number,
        'address': user.main_address
    } 

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∫–æ—Ä–∑–∏–Ω—ã
    data = await state.get_data()
    category = data.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    size = data.get('size', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    color = data.get('color', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    link = data.get('link', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    price = data.get('price', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    delivery_method = data.get('delivery_method', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    total_price = price * get_currency_cny() #–†–∞—Å—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏

    cart_message = f"Ô∏è –ö–û–†–ó–ò–ù–ê –ó–ê–ö–ê–ó–û–í Ô∏è\n" \
                   f"–§–ò–û: {user_data['full_name']}\n" \
                   f"–ö–æ–Ω—Ç–∞–∫—Ç: {user_data['phone_number']}\n" \
                   f"–ê–¥—Ä–µ—Å: {user_data['address']}\n" \
                   f"‚ÄçÔ∏è –í–´–ë–†–ê–ù–ù–´–ï –¢–û–í–ê–†–´ ‚ÄçÔ∏è\n" \
                   f"‚ûÄ –ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: {category}\n" \
                   f"‚ûÅ –†–∞–∑–º–µ—Ä —Ç–æ–≤–∞—Ä–∞: {size}\n" \
                   f"‚ûÇ –¶–≤–µ—Ç —Ç–æ–≤–∞—Ä–∞: {color}\n" \
                   f"‚ûÉ –°—Å—ã–ª–∫–∞ –Ω–∞ —Ç–æ–≤–∞—Ä: {link}\n" \
                   f"‚ûÑ –°—Ç–æ–∏–º–æ—Å—Ç—å —Ç–æ–≤–∞—Ä–∞: {price:.2f}‚ÇΩ - ({delivery_method})\n" \
                   f"–û–ë–©–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_price:.2f}‚ÇΩ\n" \

    await callback_query.message.answer(cart_message, reply_markup=cart_keyboard)
    await callback_query.answer()

@router.callback_query(F.data == "confirm_payment")
async def process_confirm_payment(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –æ–ø–ª–∞—Ç—É".
    """
    await callback_query.message.answer("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ–ø–ª–∞—Ç—ã:\n–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (—Ñ–æ—Ç–æ) –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã, —á—Ç–æ–±—ã –º—ã —É–±–µ–¥–∏–ª–∏—Å—å, —á—Ç–æ –í—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ –æ–ø–ª–∞—Ç–∏–ª–∏ –∑–∞–∫–∞–∑")
    await state.set_state(OrderForm.waiting_for_payment_screenshot)
    await callback_query.answer()

@router.message(OrderForm.waiting_for_payment_screenshot, F.photo)
async def process_payment_screenshot(message: Message, state: FSMContext, bot: Bot, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –æ–ø–ª–∞—Ç—ã.
    """
    photo = message.photo[-1]  # –ë–µ—Ä–µ–º —Ñ–æ—Ç–æ –Ω–∞–∏–±–æ–ª—å—à–µ–≥–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–∏—è
    file_id = photo.file_id
    file = await bot.get_file(file_id)
    file_path = file.file_path
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ñ–∞–π–ª, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä—É –∏ —Ç.–¥.

# –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_id –∏–ª–∏ message_id)
    file_name = f"payment_{message.from_user.id}_{message.message_id}.jpg"  # –î–æ–±–∞–≤–ª—è–µ–º user_id –∏ message_id
    full_file_path = os.path.join(PAY_SCREENS_DIR, file_name)

   # –°–æ–∑–¥–∞–µ–º –∏–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è (–º–æ–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å file_id –∏–ª–∏ message_id)
    file_name = f"payment_{message.from_user.id}_{message.message_id}.jpg"  # –î–æ–±–∞–≤–ª—è–µ–º user_id –∏ message_id
    full_file_path = os.path.join(PAY_SCREENS_DIR, file_name)

    try:
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –µ–≥–æ
        await bot.download_file(file_path, full_file_path)

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–∞–π–ª—É –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
        await state.update_data(payment_screenshot_path=full_file_path)

        await message.answer("–°–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –ø–æ–ª—É—á–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É.\n–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞.")

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä—É (–ø—Ä–∏–º–µ—Ä)
        await bot.send_photo(
    chat_id=MANAGER_TELEGRAM_ID,
    photo=FSInputFile(full_file_path),
    caption=f"–ù–æ–≤—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç –æ–ø–ª–∞—Ç—ã –æ—Ç {message.from_user.full_name} ({message.from_user.id})"
    )
        user = await db.get_user_by_tg_id(message.from_user.id)
        active_orders = await db.get_active_orders_by_tg_id(user.tg_id)
        order = active_orders[-1] #–ë–µ—Ä–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–∫–∞–∑, —Ç–∞–∫ –∫–∞–∫ –æ–Ω –∞–∫—Ç—É–∞–ª—å–Ω—ã–π
        await db.save_payment_screenshot(order.id, full_file_path)

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")

    finally:
        await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏



@router.message(OrderForm.waiting_for_payment_screenshot, ~F.photo)
async def process_payment_screenshot_incorrect(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –≤–≤–æ–¥–∞ (–Ω–µ —Ñ–æ—Ç–æ) –ø—Ä–∏ –æ–∂–∏–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.
    """
    await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç (—Ñ–æ—Ç–æ) –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–Ω–æ–π –æ–ø–ª–∞—Ç—ã.")

@router.callback_query(F.data == "use_promocode")
async def process_use_promocode(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ–º–æ–∫–æ–¥".
    """
    await callback_query.message.answer("–ü—Ä–æ–º–æ–∫–æ–¥—ã: –í–≤–µ–¥–∏—Ç–µ –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ –í–∞—à –ø—Ä–æ–º–æ–∫–æ–¥")
    await state.set_state(OrderForm.waiting_for_promocode)
    await callback_query.answer()

@router.message(OrderForm.waiting_for_promocode)
async def process_promocode(message: Message, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –ø—Ä–æ–º–æ–∫–æ–¥–∞.
    –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏.
    """
    promocode = message.text
    # TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–º–æ–∫–æ–¥–∞ –∏ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏
    await message.answer(f"–ü—Ä–æ–º–æ–∫–æ–¥ '{promocode}' –ø—Ä–∏–Ω—è—Ç.\n(–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è —Å–∫–∏–¥–∫–∏ –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞)")
    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

@router.callback_query(F.data == "add_another_item")
async def process_add_another_item(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–î–æ–±–∞–≤–∏—Ç—å —Ç–æ–≤–∞—Ä".
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —Ç–æ–≤–∞—Ä–∞.
    """
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:\n- –û—Ç –≤—ã–±–æ—Ä–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∑–∞–≤–∏—Å–∏—Ç —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤–∞—à–µ–≥–æ —Ç–æ–≤–∞—Ä–∞",
                                         reply_markup=category_keyboard)
    await state.set_state(OrderForm.waiting_for_category)
    await callback_query.answer()

@router.callback_query(F.data == "remove_items")
async def process_remove_items(callback_query: CallbackQuery, state: FSMContext):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–£–¥–∞–ª–∏—Ç—å —Ç–æ–≤–∞—Ä—ã".
    TODO: –î–æ–±–∞–≤–∏—Ç—å –ª–æ–≥–∏–∫—É —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã.
    """
    await callback_query.message.answer("–§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∏—è —Ç–æ–≤–∞—Ä–æ–≤ –∏–∑ –∫–æ—Ä–∑–∏–Ω—ã –Ω–µ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–∞.")
    await callback_query.answer()

# ===  –û—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞ ===

@router.callback_query(F.data == "track_order")
async def track_order_handler(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞–∫–∞–∑".
    """
    await callback_query.message.answer(
        "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–µ –∑–∞–∫–∞–∑–∞...",  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
        reply_markup=track_order_keyboard
    )
    await callback_query.answer()

# === –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è ===

@router.callback_query(F.data == "check_status")
async def check_status_handler(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å".
    """
    await callback_query.message.answer("–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–∞—à–µ–≥–æ –∑–∞–∫–∞–∑–∞: ... (–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å)")
    await callback_query.answer()

@router.callback_query(F.data == "order_history")
async def order_history_handler(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤".
    """
    await callback_query.message.answer("–ò—Å—Ç–æ—Ä–∏—è –≤–∞—à–∏—Ö –∑–∞–∫–∞–∑–æ–≤: ... (–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é)")
    await callback_query.answer()

@router.callback_query(F.data == "status_info")
async def status_info_handler(callback_query: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö".
    """
    await callback_query.message.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ç–∞—Ç—É—Å–∞—Ö: ... (–ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é)")
    await callback_query.answer()


