import datetime
import logging
from aiogram.fsm.state import State, StatesGroup
from aiogram import types, F, Router, Bot
from aiogram.fsm.context import FSMContext
from aiogram.types import (ReplyKeyboardRemove, CallbackQuery, InlineKeyboardButton, 
                           InlineKeyboardMarkup, FSInputFile)
from app.keyboards.main_kb import main_keyboard
from app.keyboards.calculate_order_kb import (order_type_keyboard, calculate_category_keyboard, 
                                              registration_keyboard, opt_keyboard)
# from app.utils.currency import get_currency_cny
from app.config import MANAGER_TELEGRAM_ID
from app.database.database import Database

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, encoding='utf-8')

router = Router()


# FSM States
class OrderState(StatesGroup):
    choosing_order_type = State()  # –û–ø—Ç –∏–ª–∏ —Ä–æ–∑–Ω–∏—Ü–∞
    choosing_good = State()        # –í—ã–±–æ—Ä —Ç–æ–≤–∞—Ä–∞
    waiting_price = State()       # –í–≤–æ–¥ —Å—Ç–æ–∏–º–æ—Å—Ç–∏
    choosing_delivery = State()    # –í—ã–±–æ—Ä –¥–æ—Å—Ç–∞–≤–∫–∏


@router.callback_query(F.data == 'calculate_price')
async def calculate_price(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∑–∞–∫–∞–∑–∞:", reply_markup=order_type_keyboard
    )
    await state.set_state(OrderState.choosing_order_type)
    await callback.answer()

@router.callback_query(OrderState.choosing_order_type, F.data == 'retail')
async def process_order_type(callback_query: CallbackQuery, state: FSMContext):
    order_type = callback_query.data
    await state.update_data(order_type=order_type)
    await callback_query.message.answer("–í—ã –≤—ã–±—Ä–∞–ª–∏ —Ä–æ–∑–Ω–∏—á–Ω—ã–π —Ä–∞—Å—á–µ—Ç!")
    
    await callback_query.message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é —Ç–æ–≤–∞—Ä–∞:", reply_markup=calculate_category_keyboard)
    await state.set_state(OrderState.choosing_good)
    await callback_query.answer()


@router.callback_query(F.data == 'wholesale')
async def process_order_type(callback_query: CallbackQuery, state: FSMContext):
    order_type = callback_query.data
    await state.update_data(order_type=order_type)
    await callback_query.message.answer(
        (
            "–í—ã –≤—ã–±—Ä–∞–ª–∏ –æ–ø—Ç–æ–≤—ã–π —Ç–∏–ø –∑–∞–∫–∞–∑–∞!\n"
            "–î–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –Ω–∞ –æ–ø—Ç–æ–≤—ã–π –∑–∞–∫–∞–∑ —Å–≤—è–∂–∏—Ç–µ—Å—å –ø–æ–∂–∞–ª—É–π—Å—Ç–∞ —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º "
            "–∏–ª–∏ –æ–∑–Ω–∞–∫–æ–º—å—Ç–µ—Å—å —Å —Ç–µ–∫—É—â–∏–º –ø—Ä–∞–π—Å–æ–º."),
            reply_markup= opt_keyboard
        )

    await callback_query.answer()
    

@router.callback_query(F.data == "opt_ask_manager")
async def send_opt_request_to_manager(callback_query: CallbackQuery, bot: Bot, db: Database):
    """Sends opt price calculateion request to manager"""

    tg_id = callback_query.from_user.id
    user = await db.get_user_by_tg_id(tg_id)

    # print(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_link if user.telegram_link else '' } \
    #                                 ({user.unique_code}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
    if user:
        await bot.send_message(chat_id=MANAGER_TELEGRAM_ID, 
                                text=f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.telegram_link if user.telegram_link else '' } \
                                    ({user.unique_code}) –∑–∞–ø—Ä–æ—Å–∏–ª —Ä–∞—Å—á–µ—Ç –æ–ø—Ç–æ–≤–æ–≥–æ –∑–∞–∫–∞–∑–∞.")
        await callback_query.message.answer("–í–∞—à –∑–∞–ø—Ä–æ—Å —É–∂–µ —É –Ω–∞—à–µ–≥–æ –º–µ–Ω–µ–¥–∂–µ—Ä–∞. –°–∫–æ—Ä–æ –æ–Ω —Å –í–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è.")

    await callback_query.answer() # Acknowledge callback

@router.callback_query(F.data == "shipping_cost")
async def send_shipping_cost_document(callback_query: CallbackQuery, bot: Bot):
    """Sends the shipping cost document to the user."""
    document = FSInputFile("data/IR1047.xlsx") # REPLACE with correct path
    await bot.send_document(callback_query.from_user.id, document=document, 
                            caption="–®–∞–±–ª–æ–Ω –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ —É–ø–∞–∫–æ–≤–∫–∏")
    await callback_query.answer() # Acknowledge callback

@router.callback_query(OrderState.choosing_good, F.data.startswith("calculate_category:"))
async def process_good_type(callback_query: CallbackQuery, state: FSMContext, db: Database):
    good_type = callback_query.data.split(":")[1]
    await state.update_data(good_type=good_type)

 # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∫—É—Ä—Å —é–∞–Ω—è –∫ —Ä—É–±–ª—é –∏–∑ –ë–î
    cny_to_rub = await db.get_exchange_rate("cny_to_rub")
    if cny_to_rub is None:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —é–∞–Ω—è –∏–∑ –ë–î.")
        await callback_query.message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —é–∞–Ω—è –∏–∑ –ë–î.")
        await state.clear()
        await callback_query.answer()
        return None
    
    await state.update_data(cny_to_rub=cny_to_rub)

    text = (
            "–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É —Ç–æ–≤–∞—Ä–∞ –≤ CNY:\n\n"
            f"–ö—É—Ä—Å –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({datetime.datetime.now().strftime('%d.%m.%Y')}):\n"
            f"üëâ ¬•1 = {cny_to_rub} ‚ÇΩ\n"
        )

    await callback_query.message.answer(text)
    await state.set_state(OrderState.waiting_price)
    await callback_query.answer()



@router.message(OrderState.waiting_price, F.text)
async def process_price(message: types.Message, state: FSMContext):
    try:
        price = float(message.text)
        await state.update_data(price=price)

        text = (
            f"–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–∞ –≤ CNY: {price}\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:"
        )

        delivery_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úàÔ∏è –ê–≤–∏–∞—ç–∫—Å–ø—Ä–µ—Å—Å", callback_data="air_delivery"),
                InlineKeyboardButton(text="üöõ –ê–≤—Ç–æ—ç–∫—Å–ø—Ä–µ—Å—Å", callback_data="express_delivery"),
            ]
        ])

        await message.answer(text, reply_markup=delivery_keyboard)
        await state.set_state(OrderState.choosing_delivery)
    except ValueError:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –¥–ª—è —Å—É–º–º—ã —Ç–æ–≤–∞—Ä–∞.")



@router.callback_query(OrderState.choosing_delivery, F.data.in_(['air_delivery', 'express_delivery']))
async def process_delivery_type(callback_query: CallbackQuery, state: FSMContext, db: Database):
    delivery_type = callback_query.data
    await state.update_data(delivery_type=delivery_type)

    user_data = await state.get_data()  # Get all collected data
    order_type = user_data.get('order_type')
    good_type = user_data.get('good_type')
    price = user_data.get('price')
    cny_to_rub = user_data.get('cny_to_rub')

    if delivery_type == "air_delivery":
        delivery_name = "–ê–≤–∏–∞—ç–∫—Å–ø—Ä–µ—Å—Å"
    else:
        delivery_name = "–ê–≤—Ç–æ—ç–∫—Å–ø—Ä–µ—Å—Å"

    
    # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –≤ —é–∞–Ω—è—Ö –∏–∑ –ë–î
    delivery_price_rub = await db.get_delivery_price(good_type, delivery_name)
    if delivery_price_rub is None:
        await callback_query.message.answer(
            f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{good_type}' –∏ —Ç–∏–ø–∞ '{delivery_name}' –∏–∑ –ë–î.")
        await state.clear()
        await callback_query.answer()
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É –¥–æ—Å—Ç–∞–≤–∫–∏ –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ '{good_type}' –∏ —Ç–∏–ø–∞ '{delivery_name}' –∏–∑ –ë–î.")
        return None

    price_rub = price * cny_to_rub
    total_price = price_rub + delivery_price_rub

    # Create the final order information message
    order_info = (
        f"–¢–∏–ø –∑–∞–∫–∞–∑–∞: {order_type}\n"
        f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è —Ç–æ–≤–∞—Ä–∞: {good_type}\n"
        f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {price} CNY\n"
        f"–¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞ –≤ —Ä—É–±–ª—è—Ö: {price_rub} —Ä—É–±.\n"
        f"–¢–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_name}\n"
        f"–°—Ç–æ–∏–º–æ—Å—Ç—å –¥–æ—Å—Ç–∞–≤–∫–∏: {delivery_price_rub} —Ä—É–±.\n"
        f"–ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {total_price} —Ä—É–±.\n"

    )

    # Create the inline keyboard for post-order actions
    post_order_keyboard = InlineKeyboardMarkup(inline_keyboard=[
        [
            InlineKeyboardButton(text="–†–∞—Å—Å—á–∏—Ç–∞—Ç—å –¥—Ä—É–≥–æ–π –∑–∞–∫–∞–∑", callback_data="new_order"),
            InlineKeyboardButton(text="–û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="confirm_order"),
        ],
        [
            InlineKeyboardButton(text="‚¨Ö –ù–∞–∑–∞–¥", callback_data="back"),
            InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="cancel"),
        ],
    ])

    await callback_query.message.answer(order_info, reply_markup=post_order_keyboard)

    await callback_query.answer()

@router.callback_query(F.data == "new_order")
async def process_new_order(callback_query: CallbackQuery, state: FSMContext):
    # Reset the state and start a new order calculation
    await state.clear()
    await calculate_price(callback_query, state)  # Start over with calculate_price
    await callback_query.answer()


@router.callback_query(F.data == "confirm_order")
async def process_confirm_order(callback_query: CallbackQuery, state: FSMContext, db: Database):

    tg_id = callback_query.from_user.id
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º telegram ID
    existing_user = await db.get_user_by_tg_id(tg_id)  # –¢–µ–ø–µ—Ä—å –∏—Å–ø–æ–ª—å–∑—É–µ–º db
    if not existing_user:  #–ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç, —Ç–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è.
         # Implement order confirmation logic here (e.g., send order details to admin, etc.)
         await callback_query.message.answer(
        "–î–ª—è –Ω–∞—á–∞–ª–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –ø—Ä–æ—Å—Ç—É—é –ø—Ä–æ—Ü–µ–¥—É—Ä—É —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –≤ —Å–∏—Å—Ç–µ–º–µ.",
          reply_markup=registration_keyboard)
    else:
         await callback_query.message.answer(
        "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —Å–∏—Å—Ç–µ–º–µ –∏ –º–æ–∂–µ—Ç–µ –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑.",
          reply_markup=main_keyboard)
   
    await state.clear()  # Clear state after order confirmation
    await callback_query.answer()


@router.callback_query(F.data == "back")
async def process_back(callback_query: CallbackQuery, state: FSMContext):
    # Go back to the delivery options selection
    await callback_query.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –∫ –≤—ã–±–æ—Ä—É —Ç–∏–ø–∞ –¥–æ—Å—Ç–∞–≤–∫–∏")

    user_data = await state.get_data()
    price = user_data.get('price')

    text = (
        f"–°—É–º–º–∞ —Ç–æ–≤–∞—Ä–∞ –≤ CNY: {price}\n"
        f"–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –¥–æ—Å—Ç–∞–≤–∫–∏:"
    )

    delivery_keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(text="‚úà –ê–≤–∏–∞—ç–∫—Å–ø—Ä–µ—Å—Å", callback_data="air_delivery"),
                InlineKeyboardButton(text="üöõ –ê–≤—Ç–æ—ç–∫—Å–ø—Ä–µ—Å—Å", callback_data="express_delivery"),
            ]
        ])

    await callback_query.message.edit_text(text, reply_markup=delivery_keyboard)
    await state.set_state(OrderState.choosing_delivery)


@router.callback_query(F.data == "cancel")
async def process_cancel(callback_query: CallbackQuery, state: FSMContext):
    # Cancel the order and clear the state
    await callback_query.message.answer("–ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.")
    await callback_query.message.delete() #remove message
    await state.clear()
    await callback_query.answer()
