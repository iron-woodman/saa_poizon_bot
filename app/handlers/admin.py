from aiogram import F, Router, Bot
from aiogram.types import (Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, 
    InlineKeyboardButton, InlineKeyboardMarkup)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from app.database.database import Database
from app.database.models import Order
from typing import Optional, List
from app.keyboards.admin_kb import (create_inline_keyboard, CALLBACK_DATA_PREFIX, 
                                    order_status_keyboard, admin_keyboard)


router = Router()


# FSM –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ telegram_id
class AdminStates(StatesGroup):
    waiting_for_user_tg_id = State()


def format_order_for_telegram(order: Order) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram-–±–æ—Ç–µ.
    –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
    """

    message = f"üì¶ *–ó–∞–∫–∞–∑ ‚Ññ{order.order_code}*\n\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º order_code –≤–º–µ—Å—Ç–æ order.id
    message += f"üóìÔ∏è –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"  # –ë–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    message += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
    message += f"üìè –†–∞–∑–º–µ—Ä: {order.size}\n"
    message += f"üé® –¶–≤–µ—Ç: {order.color}\n"
    message += f"üîó –°—Å—ã–ª–∫–∞: {order.link}\n"
    message += f"üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {order.price:.2f}\n"
    message += f"üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_method}\n"
    message += f"üí≤ –û–±—â–∞—è —Ü–µ–Ω–∞ (—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π): {order.total_price:.2f}\n"

    if order.promocode:
        message += f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: {order.promocode}\n"

    message += f"üö¶ –°—Ç–∞—Ç—É—Å: {order.status}\n"

    if order.tracking_number:
        message += f"üîé –ù–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {order.tracking_number}\n"
    if order.estimated_delivery:
        message += f"üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order.estimated_delivery.strftime('%d.%m.%Y')}\n"  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if order.status == "–û–ø–ª–∞—á–µ–Ω":
        message += "‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
    elif order.status == "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ":
        message += "üõ†Ô∏è –ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
    elif order.status == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω":
        message += "üöÄ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
    elif order.status == "–ó–∞–≤–µ—Ä—à–µ–Ω":
        message += "üéâ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
    elif order.status == "–û—Ç–º–µ–Ω–µ–Ω":
        message += "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n"
    elif order.status == "–°–æ–∑–¥–∞–Ω":
        message += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.\n"
    else:
        message += "‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è.\n"  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤

    return message



@router.callback_query(F.data == "active_orders")
async def ask_for_user_tg_id(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
    await state.set_state(AdminStates.waiting_for_user_tg_id)
    await callback.answer()


@router.message(AdminStates.waiting_for_user_tg_id)
async def process_user_tg_id(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π telegram_id –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã."""
    try:
        user_tg_id = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = await db.get_active_orders_by_tg_id(user_tg_id)

    if orders:
        order_message = f'–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_tg_id}):\n'
        codes = []
        for order in orders:
            codes.append(order.order_code)
            order_info = format_order_for_telegram(order)
            order_message += order_info
            order_message += '\n'
        print(order_message)
        await message.answer(
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_tg_id}): {order_message}")
            
        await message.answer(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
    reply_markup=create_inline_keyboard(codes)
)
    else:
        await message.answer(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id {user_tg_id}")


@router.callback_query(F.data.startswith(CALLBACK_DATA_PREFIX))
async def process_order_selection(callback: CallbackQuery, state: FSMContext, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å code –∑–∞–∫–∞–∑–æ–≤.
    """
    order_code = callback.data[len(CALLBACK_DATA_PREFIX):]  # –ò–∑–≤–ª–µ–∫–∞–µ–º code –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data

    order = await db.get_order_by_code(order_code=order_code)
    if order:
        await state.update_data(order_code=order_code)
        order_info = format_order_for_telegram(order)
        print(order_info)
        await callback.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ({order_code}) : \n{order_info}") # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
        await callback.message.answer(f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:", reply_markup=order_status_keyboard)
    else:
        await callback.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑—É {order_code}.")
    await callback.answer() #  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º



@router.callback_query(lambda c: c.data.startswith('status_'))
async def process_status_selection(callback: CallbackQuery, state: FSMContext, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    selected_status = callback.data[len('status_'):] # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
    data = await state.get_data()
    order_code = data.get('order_code')

    if not order_code:
        await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω order_code –≤ state. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = await db.update_order_status(order_code, selected_status)

    if success:
        await callback.message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_code} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {selected_status}")
    else:
        await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_code}.")

    await callback.answer() #–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=admin_keyboard)

@router.callback_query(F.data == "all_orders")
async def show_all_orders(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –∑–∞–∫–∞–∑—ã'."""
    tg_id = callback.from_user.id
    orders = await db.get_all_orders_by_tg_id(tg_id)
    if orders:
        order_message = f'–∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫):\n'
        for order in orders:
            order_info = format_order_for_telegram(order)
            order_message += order_info
            order_message += '\n'
        print(order_message)
        await callback.message.answer(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {order_message}") # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
    
    await callback.answer()
    await callback.message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=admin_keyboard)




