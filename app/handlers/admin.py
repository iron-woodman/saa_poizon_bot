import os
import json
import logging
from typing import Dict, Any
from aiogram import F, Router, Bot
from aiogram.types import (Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, Document,
    InlineKeyboardButton, InlineKeyboardMarkup, FSInputFile)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, List

from app.database.database import Database
from app.database.models import Order
from app.keyboards.admin_kb import (create_inline_keyboard, CALLBACK_DATA_PREFIX, 
                                    order_status_keyboard, admin_keyboard)

# –ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

router = Router()


# FSM –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ telegram_id
class AdminStates(StatesGroup):
    waiting_for_user_tg_id = State()


def format_order_for_telegram(order: Order) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram-–±–æ—Ç–µ.
    –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
    """

    message = f"üì¶ *–ó–∞–∫–∞–∑ ‚Ññ{order.id}*\n\n"
    message += f"üóìÔ∏è –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"  # –ë–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    message += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
    message += f"üìè –†–∞–∑–º–µ—Ä: {order.size}\n"
    message += f"üé® –¶–≤–µ—Ç: {order.color}\n"
    message += f"üîó –°—Å—ã–ª–∫–∞: {order.link}\n"
    message += f"üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {order.price:.2f}\n"
    message += f"üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_method}\n"
    message += f"üí≤ –û–±—â–∞—è —Ü–µ–Ω–∞ (—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π): {order.total_price:.2f}\n"

    if order.promocode:
        message += f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: {order.promocode}\n"

    message += f"üö¶ –°—Ç–∞—Ç—É—Å: {order.status}\n"

    if order.tracking_number:
        message += f"üîé –ù–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {order.tracking_number}\n"
    if order.estimated_delivery:
        message += f"üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order.estimated_delivery.strftime('%d.%m.%Y')}\n"  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    if order.status == "–û–ø–ª–∞—á–µ–Ω":
        message += "‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
    elif order.status == "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ":
        message += "üõ†Ô∏è –ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
    elif order.status == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω":
        message += "üöÄ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
    elif order.status == "–ó–∞–≤–µ—Ä—à–µ–Ω":
        message += "üéâ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
    elif order.status == "–û—Ç–º–µ–Ω–µ–Ω":
        message += "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n"
    elif order.status == "–°–æ–∑–¥–∞–Ω":
        message += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.\n"
    else:
        message += "‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è.\n"  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤

    return message



@router.callback_query(F.data == "active_orders")
async def ask_for_user_tg_id(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ telegram_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –Ω—É–∂–Ω–æ –Ω–∞–π—Ç–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã:")
    await state.set_state(AdminStates.waiting_for_user_tg_id)
    await callback.answer()


@router.message(AdminStates.waiting_for_user_tg_id)
async def process_user_tg_id(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π telegram_id –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã."""
    try:
        user_tg_id = int(message.text)
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π telegram ID. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ.")
        return

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = await db.get_active_orders_by_tg_id(user_tg_id)

    if orders:
        order_message = f'–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_tg_id}):\n'
        codes = []
        for order in orders:
            codes.append(order.id)
            order_info = format_order_for_telegram(order)
            order_message += order_info
            order_message += '\n'
        print(order_message)
        await message.answer(
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_tg_id}): {order_message}")
            
        await message.answer(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
    reply_markup=create_inline_keyboard(codes)
)
    else:
        await message.answer(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id {user_tg_id}")


# @router.callback_query(F.data.startswith(CALLBACK_DATA_PREFIX))
# async def process_order_selection(callback: CallbackQuery, state: FSMContext, db: Database):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å code –∑–∞–∫–∞–∑–æ–≤.
#     """
#     order_code = callback.data[len(CALLBACK_DATA_PREFIX):]  # –ò–∑–≤–ª–µ–∫–∞–µ–º code –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data

#     order = await db.get_order_by_code(order_code=order_code)
#     if order:
#         await state.update_data(order_code=order_code)
#         order_info = format_order_for_telegram(order)
#         # print(order_info)
#         await callback.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ({order_code}) : \n{order_info}") # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
#         await callback.message.answer(f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:", reply_markup=order_status_keyboard)
#     else:
#         await callback.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑—É {order_code}.")
#     await callback.answer() #  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º



# @router.callback_query(lambda c: c.data.startswith('status_'))
# async def process_status_selection(callback: CallbackQuery, state: FSMContext, db: Database):
#     """
#     –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
#     """
#     selected_status = callback.data[len('status_'):] # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
#     data = await state.get_data()
#     order_code = data.get('order_code')

#     if not order_code:
#         await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω order_code –≤ state. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
#         return

#     # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
#     success = await db.update_order_status(order_code, selected_status)

#     if success:
#         await callback.message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_code} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {selected_status}")
#     else:
#         await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_code}.")

#     await callback.answer() #–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
#     await callback.message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=admin_keyboard)

@router.callback_query(F.data == "all_orders")
async def show_all_orders(callback: CallbackQuery, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –∑–∞–∫–∞–∑—ã'."""
    tg_id = callback.from_user.id
    orders = await db.get_all_orders_by_tg_id(tg_id)
    if orders:
        order_message = f'–∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id} (–ø–æ–ª–Ω—ã–π —Å–ø–∏—Å–æ–∫):\n'
        for order in orders:
            order_info = format_order_for_telegram(order)
            order_message += order_info
            order_message += '\n'
        print(order_message)
        await callback.message.answer(
            f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–∞—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {tg_id}: {order_message}") # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
    
    await callback.answer()
    await callback.message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=admin_keyboard)


@router.callback_query(F.data == "orders_report")
async def orders_report(callback: CallbackQuery, db: Database, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –∑–∞–∫–∞–∑—ã'."""
    try:
        filepath = await db.export_orders_to_excel()
        if filepath:
            try:
                document = FSInputFile(filepath)  # –°–æ–∑–¥–∞–µ–º FSInputFile
                await bot.send_document(callback.message.chat.id, document=document)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            except FileNotFoundError:
                await callback.message.answer("–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

    except Exception as e:
        logging.error(f"Error in generate_report handler: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
    finally:
        await callback.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callbackQuery
    
    await callback.message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=admin_keyboard)


@router.callback_query(F.data == "users_report")
async def users_report(callback: CallbackQuery, db: Database, bot: Bot):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–í—Å–µ –∑–∞–∫–∞–∑—ã'."""
    try:
        filepath = await db.export_users_to_excel()
        if filepath:
            try:
                document = FSInputFile(filepath)  # –°–æ–∑–¥–∞–µ–º FSInputFile
                await bot.send_document(callback.message.chat.id, document=document)  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
            except FileNotFoundError:
                await callback.message.answer("–û—à–∏–±–∫–∞: –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            await callback.message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏.")

    except Exception as e:
        logging.error(f"Error in generate_report handler: {e}")
        await callback.message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç—á–µ—Ç–∞.")
    finally:
        await callback.answer()  # –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –Ω—É–∂–Ω–æ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ callbackQuery

    await callback.message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=admin_keyboard)
    



@router.callback_query(F.data == "update_prices")
async def show_upload_prompt(callback: CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ '–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ü–µ–Ω—ã'"""
    await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫—É—Ä—Å–∞ –≤–∞–ª—é—Ç.")
    await callback.answer()  # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ, —á—Ç–æ callback –æ–±—Ä–∞–±–æ—Ç–∞–Ω


@router.message(F.document)
async def handle_document(message: Message, bot: Bot, db: Database):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ JSON —Ñ–∞–π–ª–∞ —Å —Ü–µ–Ω–∞–º–∏ –∏ –∫—É—Ä—Å–æ–º."""
    document: Document = message.document # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–æ: –ü–æ–ª—É—á–µ–Ω–∏–µ document –∏–∑ message, –∞ –Ω–µ –∏–∑ callback
    if document.mime_type == 'application/json':
        # –°–∫–∞—á–∏–≤–∞–µ–º —Ñ–∞–π–ª
        file_id = document.file_id
        file = await bot.get_file(file_id)
        file_path_dl = file.file_path
        file_path = f"{document.file_name}"  # –£–±–∏—Ä–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ –∏–º—è (–æ–Ω–æ –±—É–¥–µ—Ç —Å–æ–∑–¥–∞–Ω–æ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏)
        await bot.download_file(file_path_dl, file_path)

        try:
            # –û–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
            success = await update_data_from_json(file_path, db) # –ü–µ—Ä–µ–¥–∞–µ–º db
            if success:
                await message.reply("–¶–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –∫—É—Ä—Å –≤–∞–ª—é—Ç –∏ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã –æ–ø–ª–∞—Ç—ã —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω—ã!")
            else:
                await message.reply("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON —Ñ–∞–π–ª–∞: {e}", exc_info=True)
            await message.reply("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ JSON —Ñ–∞–π–ª–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –µ–≥–æ —Ñ–æ—Ä–º–∞—Ç.")
        finally:
            try:
                os.remove(file_path) # –ü—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
            except Exception as e:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {file_path}: {e}") # –õ–æ–≥–∏—Ä—É–µ–º, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å
    else:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–≥—Ä—É–∑–∏—Ç–µ JSON —Ñ–∞–π–ª.")


async def update_data_from_json(file_path: str, db: Database) -> bool:
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—É—Ä—Å –≤–∞–ª—é—Ç, —Ü–µ–Ω—ã –¥–æ—Å—Ç–∞–≤–∫–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–ª–∞—Ç—ã –∏–∑ JSON —Ñ–∞–π–ª–∞."""
    try:
        with open(file_path, 'r', encoding='utf-8') as jsonfile:
            data: Dict[str, Any] = json.load(jsonfile)

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—É—Ä—Å–∞ —é–∞–Ω—è
        if 'exchange_rate' in data and 'cny_to_rub' in data['exchange_rate']:
            cny_to_rub = data['exchange_rate']['cny_to_rub']
            await db.add_or_update_exchange_rate("cny_to_rub", cny_to_rub)
            logger.info(f"–ö—É—Ä—Å cny_to_rub –æ–±–Ω–æ–≤–ª–µ–Ω: {cny_to_rub}")
        else:
            logger.warning("–ö—É—Ä—Å cny_to_rub –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ JSON.")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ü–µ–Ω –¥–æ—Å—Ç–∞–≤–∫–∏
        if 'delivery_types' in data:
            for delivery_type, category_prices in data['delivery_types'].items():
                for category, price in category_prices.items():
                    await db.add_or_update_delivery_price(category, delivery_type, price)
                    logger.info(f"–¶–µ–Ω–∞ –¥–æ—Å—Ç–∞–≤–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∞: {delivery_type}, {category}, {price}")
        else:
            logger.warning("–°–µ–∫—Ü–∏—è 'delivery_types' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON.")

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –æ–ø–ª–∞—Ç—ã
        if 'payment_details' in data:
            payment_details = data['payment_details']
            phone_number = payment_details.get('phone_number')
            card_number = payment_details.get('card_number')
            FIO = payment_details.get('FIO')

            if phone_number and card_number:
                await db.add_or_update_payment_details(phone_number, card_number, FIO)
                logger.info(
                    f"–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–ª–∞—Ç—ã –æ–±–Ω–æ–≤–ª–µ–Ω—ã: phone_number={phone_number}, –§–ò–û={FIO}, card_number=****** (—Å–∫—Ä—ã—Ç–æ)")
            else:
                logger.warning("–ù–µ –≤—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –æ–ø–ª–∞—Ç—ã (phone_number, card_number, FIO) –Ω–∞–π–¥–µ–Ω—ã –≤ JSON.")
        else:
            logger.warning("–°–µ–∫—Ü–∏—è 'payment_details' –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ JSON.")

        return True

    except FileNotFoundError:
        logger.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {file_path}", exc_info=True)
        return False
    except json.JSONDecodeError as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–∏ JSON: {e}", exc_info=True)
        return False
    except Exception as e:
        logger.error(f"–û–±—â–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ JSON: {e}", exc_info=True)
        return False