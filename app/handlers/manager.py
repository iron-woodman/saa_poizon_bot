import os
import json
import logging
from typing import Dict, Any
from aiogram import F, Router, Bot
from aiogram.types import (Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton, Document,
    InlineKeyboardButton, InlineKeyboardMarkup)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from typing import Optional, List

from app.database.database import Database
from app.database.models import Order
from app.keyboards.manager_kb import (create_inline_keyboard, CALLBACK_DATA_PREFIX, 
                                    order_status_keyboard, manager_keyboard)

# –ü–æ–ª—É—á–∏—Ç–µ –ª–æ–≥–≥–µ—Ä
logger = logging.getLogger(__name__)

router = Router()

# FSM –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ user_code
class ManagerStates(StatesGroup):
    waiting_for_order_code= State()
    waiting_for_user_code= State()


# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç—Ä–æ–∫—É
def format_order_data(order: Order) -> str:
    """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞ –≤ —Å—Ç—Ä–æ–∫—É –¥–ª—è —Ç–µ–ª–µ–≥—Ä–∞–º-–ø–æ—Å—Ç–∞."""
    user = order.user  # –ü–æ–ª—É—á–∞–µ–º —Å–≤—è–∑–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if user:
        return (
            f"–ö–æ–¥ –∑–∞–∫–∞–∑–∞: {order.id}\n"
            f"–ö–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {user.unique_code}\n"
            # f"–¢–µ–ª–µ–≥—Ä–∞–º: {user.telegram_link}\n"
            f"–ê–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏: {user.main_address}\n"
            f"---\n"
        )
    else:
        return f"–û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è –∑–∞–∫–∞–∑–∞ {order.order_code}\n---\n"
    

def format_order_for_telegram(order: Order) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram-–±–æ—Ç–µ.
    –î–æ–±–∞–≤–ª—è–µ—Ç —ç–º–æ–¥–∑–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è.
    """
    message = f"üì¶ *–ó–∞–∫–∞–∑ ‚Ññ{order.id}*\n\n"  # –ò—Å–ø–æ–ª—å–∑—É–µ–º order_code –≤–º–µ—Å—Ç–æ order.id
    message += f"üóìÔ∏è –î–∞—Ç–∞ –∑–∞–∫–∞–∑–∞: {order.order_date.strftime('%d.%m.%Y %H:%M')}\n"  # –ë–æ–ª–µ–µ —á–∏—Ç–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã
    message += f"üè∑Ô∏è –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {order.category}\n"
    message += f"üìè –†–∞–∑–º–µ—Ä: {order.size}\n"
    message += f"üé® –¶–≤–µ—Ç: {order.color}\n"
    message += f"üîó –°—Å—ã–ª–∫–∞: {order.link}\n"
    message += f"üí∞ –¶–µ–Ω–∞ —Ç–æ–≤–∞—Ä–∞: {order.price:.2f}\n"
    message += f"üöö –°–ø–æ—Å–æ–± –¥–æ—Å—Ç–∞–≤–∫–∏: {order.delivery_method}\n"
    message += f"üí≤ –û–±—â–∞—è —Ü–µ–Ω–∞ (—Å –¥–æ—Å—Ç–∞–≤–∫–æ–π): {order.total_price:.2f}\n"

    if order.promocode:
        message += f"üé´ –ü—Ä–æ–º–æ–∫–æ–¥: {order.promocode}\n"

    message += f"üö¶ –°—Ç–∞—Ç—É—Å: {order.status}\n"

    if order.tracking_number:
        message += f"üîé –ù–æ–º–µ—Ä –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è: {order.tracking_number}\n"
    if order.estimated_delivery:
        message += f"üöö –û–∂–∏–¥–∞–µ–º–∞—è –¥–∞—Ç–∞ –¥–æ—Å—Ç–∞–≤–∫–∏: {order.estimated_delivery.strftime('%d.%m.%Y')}\n"  # –§–æ—Ä–º–∞—Ç –¥–∞—Ç—ã

    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞
    # if order.status == "–û–ø–ª–∞—á–µ–Ω":
    #     message += "‚úÖ –ó–∞–∫–∞–∑ –æ–ø–ª–∞—á–µ–Ω, –æ–∂–∏–¥–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è.\n"
    # elif order.status == "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ":
    #     message += "üõ†Ô∏è –ó–∞–∫–∞–∑ –≤ –æ–±—Ä–∞–±–æ—Ç–∫–µ.\n"
    # elif order.status == "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω":
    #     message += "üöÄ –ó–∞–∫–∞–∑ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω!\n"
    # elif order.status == "–ó–∞–≤–µ—Ä—à–µ–Ω":
    #     message += "üéâ –ó–∞–∫–∞–∑ –∑–∞–≤–µ—Ä—à–µ–Ω. –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–∫—É–ø–∫—É!\n"
    # elif order.status == "–û—Ç–º–µ–Ω–µ–Ω":
    #     message += "‚ùå –ó–∞–∫–∞–∑ –æ—Ç–º–µ–Ω–µ–Ω.\n"
    # elif order.status == "–°–æ–∑–¥–∞–Ω":
    #     message += "‚è≥ –û–∂–∏–¥–∞–µ—Ç –æ–ø–ª–∞—Ç—ã.\n"
    # else:
    #     message += "‚ÑπÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è —É—Ç–æ—á–Ω—è–µ—Ç—Å—è.\n"  # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å—Ç–∞—Ç—É—Å–æ–≤

    return message
    


@router.callback_query(F.data == "manager_update_status")
async def ask_for_user_code(callback: CallbackQuery, state: FSMContext):
    """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –º–µ–Ω–µ–¥–∂–µ—Ä–∞ user_code –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."""
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∑–∞–∫–∞–∑–∞, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:")
    await state.set_state(ManagerStates.waiting_for_order_code)
    await callback.answer()


@router.message(ManagerStates.waiting_for_order_code)
async def process_order_code(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π order_code."""
    try:
        order_code = message.text
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π order_code. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    order = await db.get_order_by_code(order_code)

    if order:
        await state.update_data(order_code=order_code)
        order_message = f'–î–∞–Ω–Ω—ã–µ –∑–∞–∫–∞–∑–∞({order_code}):\n'
        order_info = format_order_for_telegram(order)
        order_message += order_info
        print(order_message)
        await message.answer(f"{order_message} –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:\n", 
                             reply_markup=order_status_keyboard)
    else:
        await message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑—É {order_code}")


@router.message(ManagerStates.waiting_for_user_code)
async def process_user_tg_id(message: Message, state: FSMContext, db: Database):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –≤–≤–µ–¥–µ–Ω–Ω—ã–π user_code –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã."""
    try:
        user_code = message.text
    except ValueError:
        await message.answer("–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π user_code. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ.")
        return

    await state.clear()  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ

    # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    orders = await db.get_active_orders_by_user_code(user_code)

    if orders:
        order_message = f'–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_code}):\n'
        codes = []
        for order in orders:
            codes.append(order.id)
            order_info = format_order_for_telegram(order)
            order_message += order_info
            order_message += '\n'
        print(order_message)
        await message.answer(
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–∫–∞–∑—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ({user_code}): {order_message}")
            
        await message.answer(
    "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑, —Å—Ç–∞—Ç—É—Å –∫–æ—Ç–æ—Ä–æ–≥–æ —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å:",
    reply_markup=create_inline_keyboard(codes)
)
    else:
        await message.answer(f"–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–∫–∞–∑–æ–≤ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å tg_id {user_code}")



@router.callback_query(F.data.startswith(CALLBACK_DATA_PREFIX))
async def process_order_selection(callback: CallbackQuery, state: FSMContext, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫–∏ —Å code –∑–∞–∫–∞–∑–æ–≤.
    """
    order_code = callback.data[len(CALLBACK_DATA_PREFIX):]  # –ò–∑–≤–ª–µ–∫–∞–µ–º code –∑–∞–∫–∞–∑–∞ –∏–∑ callback_data

    order = await db.get_order_by_code(order_code=order_code)
    if order:
        await state.update_data(order_code=order_code)
        order_info = format_order_for_telegram(order)
        # print(order_info)
        await callback.message.answer(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–∫–∞–∑–µ ({order_code}) : \n{order_info}") # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤–≤–µ—Ä—Ö—É —ç–∫—Ä–∞–Ω–∞
        await callback.message.answer(f"–£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞:", reply_markup=order_status_keyboard)
    else:
        await callback.message.answer(f"–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∑–∞–∫–∞–∑—É {order_code}.")
    await callback.answer() #  –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –æ—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback query, –¥–∞–∂–µ –µ—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º



@router.callback_query(lambda c: c.data.startswith('status_'))
async def process_status_selection(callback: CallbackQuery, state: FSMContext, db: Database):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–∫–∞–∑–∞.
    """
    selected_status = callback.data[len('status_'):] # –ò–∑–≤–ª–µ–∫–∞–µ–º —Å—Ç–∞—Ç—É—Å –∏–∑ callback_data
    data = await state.get_data()
    order_code = data.get('order_code')

    if not order_code:
        await callback.answer("–ù–µ –Ω–∞–π–¥–µ–Ω order_code –≤ state. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∑–∞–∫–∞–∑ –∑–∞–Ω–æ–≤–æ.")
        return

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    success = await db.update_order_status(order_code, selected_status)

    if success:
        await callback.message.answer(f"–°—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_code} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞: {selected_status}")
    else:
        await callback.message.answer(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ {order_code}.")

    await callback.answer() #–û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.message.answer('–û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é:', reply_markup=manager_keyboard)
 
# –û—Å–Ω–æ–≤–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@router.callback_query(F.data.startswith("manager_orders:"))  # –õ–æ–≤–∏–º callback, –Ω–∞—á–∏–Ω–∞—é—â–∏–µ—Å—è —Å 'manager_'
async def process_manager_callback(callback: CallbackQuery, db: Database, bot: Bot):

    order_status = callback.data.split(":")[1]

    orders = await db.get_orders_by_status(order_status)
    if orders:
        message_text = ""
        messages = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —á–∞—Å—Ç–µ–π —Å–æ–æ–±—â–µ–Ω–∏–π
        for order in orders:
            order_data = format_order_data(order)
            if len(message_text) + len(order_data) > 4096:
                # –¢–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –∏ –Ω–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ
                messages.append(message_text)
                message_text = order_data  # –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–µ–∫—É—â–µ–≥–æ –∑–∞–∫–∞–∑–∞
            else:
                message_text += order_data  # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫–∞–∑ –∫ —Ç–µ–∫—É—â–µ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–µ—Å–ª–∏ –æ–Ω–æ –Ω–µ –ø—É—Å—Ç–æ–µ)
        if message_text:
            messages.append(message_text)

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ —á–∞—Å—Ç—è–º
        for message in messages:
            await callback.message.answer(message)

    else:
        await callback.message.answer("–ù–µ—Ç –∑–∞–∫–∞–∑–æ–≤ —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º —Å—Ç–∞—Ç—É—Å–æ–º.")
    await callback.answer()

